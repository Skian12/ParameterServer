# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import parameters_pb2 as parameters__pb2


class ServerStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetParams = channel.unary_unary(
        '/Server/GetParams',
        request_serializer=parameters__pb2.StateMessage.SerializeToString,
        response_deserializer=parameters__pb2.Parameters.FromString,
        )
    self.SetParams = channel.unary_unary(
        '/Server/SetParams',
        request_serializer=parameters__pb2.RequestChange.SerializeToString,
        response_deserializer=parameters__pb2.StateMessage.FromString,
        )
    self.InitParams = channel.unary_unary(
        '/Server/InitParams',
        request_serializer=parameters__pb2.Parameters.SerializeToString,
        response_deserializer=parameters__pb2.StateMessage.FromString,
        )


class ServerServicer(object):

  def GetParams(self, request, context):
    """Get params
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SetParams(self, request, context):
    """Set params
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def InitParams(self, request, context):
    """init params
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ServerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetParams': grpc.unary_unary_rpc_method_handler(
          servicer.GetParams,
          request_deserializer=parameters__pb2.StateMessage.FromString,
          response_serializer=parameters__pb2.Parameters.SerializeToString,
      ),
      'SetParams': grpc.unary_unary_rpc_method_handler(
          servicer.SetParams,
          request_deserializer=parameters__pb2.RequestChange.FromString,
          response_serializer=parameters__pb2.StateMessage.SerializeToString,
      ),
      'InitParams': grpc.unary_unary_rpc_method_handler(
          servicer.InitParams,
          request_deserializer=parameters__pb2.Parameters.FromString,
          response_serializer=parameters__pb2.StateMessage.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Server', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class MasterStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.AddWorker = channel.unary_unary(
        '/Master/AddWorker',
        request_serializer=parameters__pb2.NodeInfo.SerializeToString,
        response_deserializer=parameters__pb2.StateMessage.FromString,
        )
    self.AddServer = channel.unary_unary(
        '/Master/AddServer',
        request_serializer=parameters__pb2.NodeInfo.SerializeToString,
        response_deserializer=parameters__pb2.StateMessage.FromString,
        )
    self.FinishJob = channel.unary_unary(
        '/Master/FinishJob',
        request_serializer=parameters__pb2.NodeInfo.SerializeToString,
        response_deserializer=parameters__pb2.StateMessage.FromString,
        )


class MasterServicer(object):

  def AddWorker(self, request, context):
    """add Worker
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AddServer(self, request, context):
    """add Server
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FinishJob(self, request, context):
    """finshed job
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_MasterServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'AddWorker': grpc.unary_unary_rpc_method_handler(
          servicer.AddWorker,
          request_deserializer=parameters__pb2.NodeInfo.FromString,
          response_serializer=parameters__pb2.StateMessage.SerializeToString,
      ),
      'AddServer': grpc.unary_unary_rpc_method_handler(
          servicer.AddServer,
          request_deserializer=parameters__pb2.NodeInfo.FromString,
          response_serializer=parameters__pb2.StateMessage.SerializeToString,
      ),
      'FinishJob': grpc.unary_unary_rpc_method_handler(
          servicer.FinishJob,
          request_deserializer=parameters__pb2.NodeInfo.FromString,
          response_serializer=parameters__pb2.StateMessage.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Master', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class WorkerStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.SetDataRange = channel.unary_unary(
        '/Worker/SetDataRange',
        request_serializer=parameters__pb2.Range.SerializeToString,
        response_deserializer=parameters__pb2.StateMessage.FromString,
        )
    self.SetParamsRange = channel.unary_unary(
        '/Worker/SetParamsRange',
        request_serializer=parameters__pb2.Range.SerializeToString,
        response_deserializer=parameters__pb2.StateMessage.FromString,
        )
    self.StartWork = channel.unary_unary(
        '/Worker/StartWork',
        request_serializer=parameters__pb2.StateMessage.SerializeToString,
        response_deserializer=parameters__pb2.StateMessage.FromString,
        )
    self.SetParamsLocation = channel.unary_unary(
        '/Worker/SetParamsLocation',
        request_serializer=parameters__pb2.ParamsLocations.SerializeToString,
        response_deserializer=parameters__pb2.StateMessage.FromString,
        )


class WorkerServicer(object):

  def SetDataRange(self, request, context):
    """set data range
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SetParamsRange(self, request, context):
    """set params range
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StartWork(self, request, context):
    """start work
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SetParamsLocation(self, request, context):
    """set saram location
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_WorkerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'SetDataRange': grpc.unary_unary_rpc_method_handler(
          servicer.SetDataRange,
          request_deserializer=parameters__pb2.Range.FromString,
          response_serializer=parameters__pb2.StateMessage.SerializeToString,
      ),
      'SetParamsRange': grpc.unary_unary_rpc_method_handler(
          servicer.SetParamsRange,
          request_deserializer=parameters__pb2.Range.FromString,
          response_serializer=parameters__pb2.StateMessage.SerializeToString,
      ),
      'StartWork': grpc.unary_unary_rpc_method_handler(
          servicer.StartWork,
          request_deserializer=parameters__pb2.StateMessage.FromString,
          response_serializer=parameters__pb2.StateMessage.SerializeToString,
      ),
      'SetParamsLocation': grpc.unary_unary_rpc_method_handler(
          servicer.SetParamsLocation,
          request_deserializer=parameters__pb2.ParamsLocations.FromString,
          response_serializer=parameters__pb2.StateMessage.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Worker', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
