# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: parameters.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='parameters.proto',
  package='',
  syntax='proto3',
  serialized_pb=_b('\n\x10parameters.proto\"\x1e\n\x0cStateMessage\x12\x0e\n\x06status\x18\x01 \x01(\t\"#\n\x05Range\x12\r\n\x05\x62\x65gin\x18\x01 \x01(\x05\x12\x0b\n\x03\x65nd\x18\x02 \x01(\x05\"\x1c\n\nParameters\x12\x0e\n\x06params\x18\x01 \x03(\x02\";\n\rRequestChange\x12\r\n\x05\x62\x65gin\x18\x01 \x01(\x05\x12\x0b\n\x03\x65nd\x18\x02 \x01(\x05\x12\x0e\n\x06thetas\x18\x03 \x03(\x02\"$\n\x08NodeInfo\x12\n\n\x02ip\x18\x01 \x01(\t\x12\x0c\n\x04port\x18\x02 \x01(\x05\"@\n\x0fParamsLocations\x12-\n\x14params_location_list\x18\x01 \x03(\x0b\x32\x0f.ParamsLocation\"F\n\x0eParamsLocation\x12\n\n\x02ip\x18\x01 \x01(\t\x12\x0c\n\x04port\x18\x02 \x01(\x05\x12\r\n\x05\x62\x65gin\x18\x03 \x01(\x05\x12\x0b\n\x03\x65nd\x18\x04 \x01(\x05\x32\x8d\x01\n\x06Server\x12)\n\tGetParams\x12\r.StateMessage\x1a\x0b.Parameters\"\x00\x12,\n\tSetParams\x12\x0e.RequestChange\x1a\r.StateMessage\"\x00\x12*\n\nInitParams\x12\x0b.Parameters\x1a\r.StateMessage\"\x00\x32\x83\x01\n\x06Master\x12\'\n\tAddWorker\x12\t.NodeInfo\x1a\r.StateMessage\"\x00\x12\'\n\tAddServer\x12\t.NodeInfo\x1a\r.StateMessage\"\x00\x12\'\n\tFinishJob\x12\t.NodeInfo\x1a\r.StateMessage\"\x00\x32\xc1\x01\n\x06Worker\x12\'\n\x0cSetDataRange\x12\x06.Range\x1a\r.StateMessage\"\x00\x12)\n\x0eSetParamsRange\x12\x06.Range\x1a\r.StateMessage\"\x00\x12+\n\tStartWork\x12\r.StateMessage\x1a\r.StateMessage\"\x00\x12\x36\n\x11SetParamsLocation\x12\x10.ParamsLocations\x1a\r.StateMessage\"\x00\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_STATEMESSAGE = _descriptor.Descriptor(
  name='StateMessage',
  full_name='StateMessage',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='status', full_name='StateMessage.status', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=20,
  serialized_end=50,
)


_RANGE = _descriptor.Descriptor(
  name='Range',
  full_name='Range',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='begin', full_name='Range.begin', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='end', full_name='Range.end', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=52,
  serialized_end=87,
)


_PARAMETERS = _descriptor.Descriptor(
  name='Parameters',
  full_name='Parameters',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='params', full_name='Parameters.params', index=0,
      number=1, type=2, cpp_type=6, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=89,
  serialized_end=117,
)


_REQUESTCHANGE = _descriptor.Descriptor(
  name='RequestChange',
  full_name='RequestChange',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='begin', full_name='RequestChange.begin', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='end', full_name='RequestChange.end', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='thetas', full_name='RequestChange.thetas', index=2,
      number=3, type=2, cpp_type=6, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=119,
  serialized_end=178,
)


_NODEINFO = _descriptor.Descriptor(
  name='NodeInfo',
  full_name='NodeInfo',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ip', full_name='NodeInfo.ip', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='port', full_name='NodeInfo.port', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=180,
  serialized_end=216,
)


_PARAMSLOCATIONS = _descriptor.Descriptor(
  name='ParamsLocations',
  full_name='ParamsLocations',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='params_location_list', full_name='ParamsLocations.params_location_list', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=218,
  serialized_end=282,
)


_PARAMSLOCATION = _descriptor.Descriptor(
  name='ParamsLocation',
  full_name='ParamsLocation',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ip', full_name='ParamsLocation.ip', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='port', full_name='ParamsLocation.port', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='begin', full_name='ParamsLocation.begin', index=2,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='end', full_name='ParamsLocation.end', index=3,
      number=4, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=284,
  serialized_end=354,
)

_PARAMSLOCATIONS.fields_by_name['params_location_list'].message_type = _PARAMSLOCATION
DESCRIPTOR.message_types_by_name['StateMessage'] = _STATEMESSAGE
DESCRIPTOR.message_types_by_name['Range'] = _RANGE
DESCRIPTOR.message_types_by_name['Parameters'] = _PARAMETERS
DESCRIPTOR.message_types_by_name['RequestChange'] = _REQUESTCHANGE
DESCRIPTOR.message_types_by_name['NodeInfo'] = _NODEINFO
DESCRIPTOR.message_types_by_name['ParamsLocations'] = _PARAMSLOCATIONS
DESCRIPTOR.message_types_by_name['ParamsLocation'] = _PARAMSLOCATION

StateMessage = _reflection.GeneratedProtocolMessageType('StateMessage', (_message.Message,), dict(
  DESCRIPTOR = _STATEMESSAGE,
  __module__ = 'parameters_pb2'
  # @@protoc_insertion_point(class_scope:StateMessage)
  ))
_sym_db.RegisterMessage(StateMessage)

Range = _reflection.GeneratedProtocolMessageType('Range', (_message.Message,), dict(
  DESCRIPTOR = _RANGE,
  __module__ = 'parameters_pb2'
  # @@protoc_insertion_point(class_scope:Range)
  ))
_sym_db.RegisterMessage(Range)

Parameters = _reflection.GeneratedProtocolMessageType('Parameters', (_message.Message,), dict(
  DESCRIPTOR = _PARAMETERS,
  __module__ = 'parameters_pb2'
  # @@protoc_insertion_point(class_scope:Parameters)
  ))
_sym_db.RegisterMessage(Parameters)

RequestChange = _reflection.GeneratedProtocolMessageType('RequestChange', (_message.Message,), dict(
  DESCRIPTOR = _REQUESTCHANGE,
  __module__ = 'parameters_pb2'
  # @@protoc_insertion_point(class_scope:RequestChange)
  ))
_sym_db.RegisterMessage(RequestChange)

NodeInfo = _reflection.GeneratedProtocolMessageType('NodeInfo', (_message.Message,), dict(
  DESCRIPTOR = _NODEINFO,
  __module__ = 'parameters_pb2'
  # @@protoc_insertion_point(class_scope:NodeInfo)
  ))
_sym_db.RegisterMessage(NodeInfo)

ParamsLocations = _reflection.GeneratedProtocolMessageType('ParamsLocations', (_message.Message,), dict(
  DESCRIPTOR = _PARAMSLOCATIONS,
  __module__ = 'parameters_pb2'
  # @@protoc_insertion_point(class_scope:ParamsLocations)
  ))
_sym_db.RegisterMessage(ParamsLocations)

ParamsLocation = _reflection.GeneratedProtocolMessageType('ParamsLocation', (_message.Message,), dict(
  DESCRIPTOR = _PARAMSLOCATION,
  __module__ = 'parameters_pb2'
  # @@protoc_insertion_point(class_scope:ParamsLocation)
  ))
_sym_db.RegisterMessage(ParamsLocation)


try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class ServerStub(object):

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.GetParams = channel.unary_unary(
          '/Server/GetParams',
          request_serializer=StateMessage.SerializeToString,
          response_deserializer=Parameters.FromString,
          )
      self.SetParams = channel.unary_unary(
          '/Server/SetParams',
          request_serializer=RequestChange.SerializeToString,
          response_deserializer=StateMessage.FromString,
          )
      self.InitParams = channel.unary_unary(
          '/Server/InitParams',
          request_serializer=Parameters.SerializeToString,
          response_deserializer=StateMessage.FromString,
          )


  class ServerServicer(object):

    def GetParams(self, request, context):
      """Get params
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def SetParams(self, request, context):
      """Set params
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def InitParams(self, request, context):
      """init params
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_ServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'GetParams': grpc.unary_unary_rpc_method_handler(
            servicer.GetParams,
            request_deserializer=StateMessage.FromString,
            response_serializer=Parameters.SerializeToString,
        ),
        'SetParams': grpc.unary_unary_rpc_method_handler(
            servicer.SetParams,
            request_deserializer=RequestChange.FromString,
            response_serializer=StateMessage.SerializeToString,
        ),
        'InitParams': grpc.unary_unary_rpc_method_handler(
            servicer.InitParams,
            request_deserializer=Parameters.FromString,
            response_serializer=StateMessage.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'Server', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class MasterStub(object):

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.AddWorker = channel.unary_unary(
          '/Master/AddWorker',
          request_serializer=NodeInfo.SerializeToString,
          response_deserializer=StateMessage.FromString,
          )
      self.AddServer = channel.unary_unary(
          '/Master/AddServer',
          request_serializer=NodeInfo.SerializeToString,
          response_deserializer=StateMessage.FromString,
          )
      self.FinishJob = channel.unary_unary(
          '/Master/FinishJob',
          request_serializer=NodeInfo.SerializeToString,
          response_deserializer=StateMessage.FromString,
          )


  class MasterServicer(object):

    def AddWorker(self, request, context):
      """add Worker
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def AddServer(self, request, context):
      """add Server
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def FinishJob(self, request, context):
      """finshed job
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_MasterServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'AddWorker': grpc.unary_unary_rpc_method_handler(
            servicer.AddWorker,
            request_deserializer=NodeInfo.FromString,
            response_serializer=StateMessage.SerializeToString,
        ),
        'AddServer': grpc.unary_unary_rpc_method_handler(
            servicer.AddServer,
            request_deserializer=NodeInfo.FromString,
            response_serializer=StateMessage.SerializeToString,
        ),
        'FinishJob': grpc.unary_unary_rpc_method_handler(
            servicer.FinishJob,
            request_deserializer=NodeInfo.FromString,
            response_serializer=StateMessage.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'Master', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class WorkerStub(object):

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.SetDataRange = channel.unary_unary(
          '/Worker/SetDataRange',
          request_serializer=Range.SerializeToString,
          response_deserializer=StateMessage.FromString,
          )
      self.SetParamsRange = channel.unary_unary(
          '/Worker/SetParamsRange',
          request_serializer=Range.SerializeToString,
          response_deserializer=StateMessage.FromString,
          )
      self.StartWork = channel.unary_unary(
          '/Worker/StartWork',
          request_serializer=StateMessage.SerializeToString,
          response_deserializer=StateMessage.FromString,
          )
      self.SetParamsLocation = channel.unary_unary(
          '/Worker/SetParamsLocation',
          request_serializer=ParamsLocations.SerializeToString,
          response_deserializer=StateMessage.FromString,
          )


  class WorkerServicer(object):

    def SetDataRange(self, request, context):
      """set data range
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def SetParamsRange(self, request, context):
      """set params range
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def StartWork(self, request, context):
      """start work
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def SetParamsLocation(self, request, context):
      """set saram location
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_WorkerServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'SetDataRange': grpc.unary_unary_rpc_method_handler(
            servicer.SetDataRange,
            request_deserializer=Range.FromString,
            response_serializer=StateMessage.SerializeToString,
        ),
        'SetParamsRange': grpc.unary_unary_rpc_method_handler(
            servicer.SetParamsRange,
            request_deserializer=Range.FromString,
            response_serializer=StateMessage.SerializeToString,
        ),
        'StartWork': grpc.unary_unary_rpc_method_handler(
            servicer.StartWork,
            request_deserializer=StateMessage.FromString,
            response_serializer=StateMessage.SerializeToString,
        ),
        'SetParamsLocation': grpc.unary_unary_rpc_method_handler(
            servicer.SetParamsLocation,
            request_deserializer=ParamsLocations.FromString,
            response_serializer=StateMessage.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'Worker', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaServerServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def GetParams(self, request, context):
      """Get params
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def SetParams(self, request, context):
      """Set params
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def InitParams(self, request, context):
      """init params
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaServerStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def GetParams(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Get params
      """
      raise NotImplementedError()
    GetParams.future = None
    def SetParams(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Set params
      """
      raise NotImplementedError()
    SetParams.future = None
    def InitParams(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """init params
      """
      raise NotImplementedError()
    InitParams.future = None


  def beta_create_Server_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('Server', 'GetParams'): StateMessage.FromString,
      ('Server', 'InitParams'): Parameters.FromString,
      ('Server', 'SetParams'): RequestChange.FromString,
    }
    response_serializers = {
      ('Server', 'GetParams'): Parameters.SerializeToString,
      ('Server', 'InitParams'): StateMessage.SerializeToString,
      ('Server', 'SetParams'): StateMessage.SerializeToString,
    }
    method_implementations = {
      ('Server', 'GetParams'): face_utilities.unary_unary_inline(servicer.GetParams),
      ('Server', 'InitParams'): face_utilities.unary_unary_inline(servicer.InitParams),
      ('Server', 'SetParams'): face_utilities.unary_unary_inline(servicer.SetParams),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_Server_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('Server', 'GetParams'): StateMessage.SerializeToString,
      ('Server', 'InitParams'): Parameters.SerializeToString,
      ('Server', 'SetParams'): RequestChange.SerializeToString,
    }
    response_deserializers = {
      ('Server', 'GetParams'): Parameters.FromString,
      ('Server', 'InitParams'): StateMessage.FromString,
      ('Server', 'SetParams'): StateMessage.FromString,
    }
    cardinalities = {
      'GetParams': cardinality.Cardinality.UNARY_UNARY,
      'InitParams': cardinality.Cardinality.UNARY_UNARY,
      'SetParams': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'Server', cardinalities, options=stub_options)


  class BetaMasterServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def AddWorker(self, request, context):
      """add Worker
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def AddServer(self, request, context):
      """add Server
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def FinishJob(self, request, context):
      """finshed job
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaMasterStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def AddWorker(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """add Worker
      """
      raise NotImplementedError()
    AddWorker.future = None
    def AddServer(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """add Server
      """
      raise NotImplementedError()
    AddServer.future = None
    def FinishJob(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """finshed job
      """
      raise NotImplementedError()
    FinishJob.future = None


  def beta_create_Master_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('Master', 'AddServer'): NodeInfo.FromString,
      ('Master', 'AddWorker'): NodeInfo.FromString,
      ('Master', 'FinishJob'): NodeInfo.FromString,
    }
    response_serializers = {
      ('Master', 'AddServer'): StateMessage.SerializeToString,
      ('Master', 'AddWorker'): StateMessage.SerializeToString,
      ('Master', 'FinishJob'): StateMessage.SerializeToString,
    }
    method_implementations = {
      ('Master', 'AddServer'): face_utilities.unary_unary_inline(servicer.AddServer),
      ('Master', 'AddWorker'): face_utilities.unary_unary_inline(servicer.AddWorker),
      ('Master', 'FinishJob'): face_utilities.unary_unary_inline(servicer.FinishJob),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_Master_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('Master', 'AddServer'): NodeInfo.SerializeToString,
      ('Master', 'AddWorker'): NodeInfo.SerializeToString,
      ('Master', 'FinishJob'): NodeInfo.SerializeToString,
    }
    response_deserializers = {
      ('Master', 'AddServer'): StateMessage.FromString,
      ('Master', 'AddWorker'): StateMessage.FromString,
      ('Master', 'FinishJob'): StateMessage.FromString,
    }
    cardinalities = {
      'AddServer': cardinality.Cardinality.UNARY_UNARY,
      'AddWorker': cardinality.Cardinality.UNARY_UNARY,
      'FinishJob': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'Master', cardinalities, options=stub_options)


  class BetaWorkerServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def SetDataRange(self, request, context):
      """set data range
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def SetParamsRange(self, request, context):
      """set params range
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def StartWork(self, request, context):
      """start work
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def SetParamsLocation(self, request, context):
      """set saram location
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaWorkerStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def SetDataRange(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """set data range
      """
      raise NotImplementedError()
    SetDataRange.future = None
    def SetParamsRange(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """set params range
      """
      raise NotImplementedError()
    SetParamsRange.future = None
    def StartWork(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """start work
      """
      raise NotImplementedError()
    StartWork.future = None
    def SetParamsLocation(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """set saram location
      """
      raise NotImplementedError()
    SetParamsLocation.future = None


  def beta_create_Worker_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('Worker', 'SetDataRange'): Range.FromString,
      ('Worker', 'SetParamsLocation'): ParamsLocations.FromString,
      ('Worker', 'SetParamsRange'): Range.FromString,
      ('Worker', 'StartWork'): StateMessage.FromString,
    }
    response_serializers = {
      ('Worker', 'SetDataRange'): StateMessage.SerializeToString,
      ('Worker', 'SetParamsLocation'): StateMessage.SerializeToString,
      ('Worker', 'SetParamsRange'): StateMessage.SerializeToString,
      ('Worker', 'StartWork'): StateMessage.SerializeToString,
    }
    method_implementations = {
      ('Worker', 'SetDataRange'): face_utilities.unary_unary_inline(servicer.SetDataRange),
      ('Worker', 'SetParamsLocation'): face_utilities.unary_unary_inline(servicer.SetParamsLocation),
      ('Worker', 'SetParamsRange'): face_utilities.unary_unary_inline(servicer.SetParamsRange),
      ('Worker', 'StartWork'): face_utilities.unary_unary_inline(servicer.StartWork),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_Worker_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('Worker', 'SetDataRange'): Range.SerializeToString,
      ('Worker', 'SetParamsLocation'): ParamsLocations.SerializeToString,
      ('Worker', 'SetParamsRange'): Range.SerializeToString,
      ('Worker', 'StartWork'): StateMessage.SerializeToString,
    }
    response_deserializers = {
      ('Worker', 'SetDataRange'): StateMessage.FromString,
      ('Worker', 'SetParamsLocation'): StateMessage.FromString,
      ('Worker', 'SetParamsRange'): StateMessage.FromString,
      ('Worker', 'StartWork'): StateMessage.FromString,
    }
    cardinalities = {
      'SetDataRange': cardinality.Cardinality.UNARY_UNARY,
      'SetParamsLocation': cardinality.Cardinality.UNARY_UNARY,
      'SetParamsRange': cardinality.Cardinality.UNARY_UNARY,
      'StartWork': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'Worker', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
